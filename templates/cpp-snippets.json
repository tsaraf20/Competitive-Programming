{
	"Template for cp": {
		"prefix": "ts",
		"body": [
		  	"#include <bits/stdc++.h>",
		 	"using namespace std;",
		 	"",
		  	"typedef long long ll;",
		  	"",
		  	"#define ff first",
		  	"#define ss second",
		  	"#define all(x) (x).begin(), (x).end()",
			"//#define __DEBUG__",
			"",
		  	"void solve () {",
		  	"\t",
		  	"\t$0",
		  	"\t",
		  	"}",
		  	"",
		  	"int main () {",
		  	"\t#ifndef ONLINE_JUDGE",
		  	"\t\tfreopen(\"input.txt\", \"r\", stdin);",
		  	"\t\tfreopen(\"output.txt\", \"w\", stdout);",
		  	"\t#endif",
		  	"\t",
		  	"\tios_base::sync_with_stdio(false);",
		  	"\tcin.tie(0);",
		  	"",
		  	"\tint t = 1;",
		  	"\t// cin >> t;",
		  	"",
		  	"\tfor (int testcase = 1; testcase <= t; ++testcase) {",
		  	"\t\t// cout << \"Case #\" << testcase << \": \";",
		  	"\t\tsolve();",
		  	"\t}",
		  	"",
		  	"\treturn 0;",
		  	"}"
		],
		"description": "Template for cp"
	},
	"Template for Modulo operations": {
		"prefix": "__mod__",
		"body": [
			"class MOD {",
			"\tpublic:",
			"\t\tconstexpr static int mod = 998244353;",
			"",
			"\t\tstatic int add (int a, int b) {",
			"\t\t\t_add(a, b);",
			"\t\t\treturn a;",
			"\t\t}",
			"",
			"\t\tstatic int sub (int a, int b) {",
			"\t\t\t_sub(a, b);",
			"\t\t\treturn a;",
			"\t\t}",
			"",
			"\t\tstatic void _add (int &a, int &b) {",
			"\t\t\ta += b;",
			"\t\t\tif (a >= mod) {",
			"\t\t\t\ta -= mod;",
			"\t\t\t}",
			"\t\t}",
			"",
			"\t\tstatic void _sub (int &a, int &b) {",
			"\t\t\ta -= b;",
			"\t\t\tif (a < 0) {",
			"\t\t\t\ta += mod;",
			"\t\t\t}",
			"\t\t}",
			"",
			"\t\ttemplate< typename T >",
			"\t\tstatic int power (int a, T b) {",
			"\t\t\tint res = 1;",
			"\t\t\tint *ptr[]{&a, &res};",
			"",
			"\t\t\twhile (b) {",
			"\t\t\t\t*ptr[b & 1] = (*ptr[b & 1]) * 1LL * a % mod;",
			"\t\t\t\tb >>= 1;",
			"\t\t\t}",
			"",
			"\t\t\treturn res;",
			"\t\t}",
			"};"
		],
		"description": "Template for Modulo operations"
	},
	"Template for debugging": {
		"prefix": "__debug__",
		"body": [
			"#ifdef __DEBUG__",
			"#define debug(...) deb(#__VA_ARGS__, __VA_ARGS__)",
			"#else",
			"#define debug(...) ;",
			"#endif",
			"",
			"string getNextArgName (string &names) {",
			"\tstack< char > stk;",
			"\tstring name = \"\";",
			"\tfor (int i = 0; i < names.length(); ++i) {",
			"\t\tchar &c = names[i];",
			"\t\tif (c == ',' && stk.empty()) {",
			"\t\t\tnames = names.substr(i + 1);",
			"\t\t\tbreak;",
			"\t\t} else {",
			"\t\t\tif (c == '(') {",
			"\t\t\t\tstk.push(c);",
			"\t\t\t} else if (c == ')') {",
			"\t\t\t\tassert(!stk.empty());",
			"\t\t\t\tstk.pop();",
			"\t\t\t}",
			"\t\t\tname += c;",
			"\t\t}",
			"\t}",
			"\treturn name;",
			"}",
			"",
			"template< typename T >",
			"void deb (string name, T x) {",
			"\tcout << name << \" = \" << x << endl;",
			"}",
			"",
			"template< typename Head, typename... Tail >",
			"void deb (string names, Head x, Tail... args) {",
			"\tstring name = getNextArgName(names);",
			"\t",
			"\tcout << name << \" = \" << x << \",\";",
			"\tdeb(names, args...);",
			"}"
		],
		"description": "Template for debugging"
	}
}